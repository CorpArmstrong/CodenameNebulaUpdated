//=============================================================================
// HomingMissile. 	(c) 2003 JimBowen
//=============================================================================
class HomingMissile expands Rocket;

var(Bowen) int SearchRadius;
var(Bowen) bool bLoseLock;
var(Bowen) float AquireFOV, MaintainFOV;
var pawn LockPawn;

replication
{
	reliable if (Role == ROLE_Authority)
		LockPawn, bLoseLock;
}

simulated function tick (float deltatime)
{
	local float fangle;
	local vector vvect, dvect;
		
		if (!Owner.IsA('DeusExPlayer'))
			return;
			
			if (owner == None)
			{
				log ("No owner on HomingMissile, aborting!");
				Destroy();
				return;
			}
			
		CheckRadius();
		Target = LockPawn;
				
		if (LockPawn != None)
		{
			vvect = normal(Velocity);
			dvect = normal(LockPawn.Location - Location);
			fangle = Acos(vvect dot dvect);
			if (fangle > MaintainFOV)
				LockPawn = None;
		}
			
		Super.Tick (DeltaTime);

}

function CheckRadius()
{
	local pawn p;
	local actor a;
	local float fangle;
	local vector vvect, dvect;

		foreach visibleactors (class 'pawn', p, SearchRadius)
			if (p != None && LockPawn == None)
				if ((p != Owner) && (!p.IsInState('Dying')))
				{
					vvect = normal(Velocity);
					dvect = normal(p.Location - Location);
					fangle = Acos(vvect dot dvect);
				//	log(fAngle);
					if (fangle < AquireFOV)
					{
						if (p.IsA('DeusExPlayer') && TeamDMGame(DeusExPlayer(Owner).DXGame) != None)
						{	
							if (DeusExPlayer(p).PlayerReplicationInfo.Team != DeusExPlayer(Owner).PlayerReplicationInfo.Team)
								LockPawn = p;
						}
						else if ((Level.NetMode != NM_Standalone) && p.IsA('DeusExPlayer'))
							LockPawn = p;
						else if (p.IsA('ScriptedPawn'))
							if((ScriptedPawn(P).IsValidEnemy(Pawn(Owner), True)) || P.IsA('Animal'))
								LockPawn = p;
					}
				}
						
		foreach visibleactors (class 'actor', a, SearchRadius * 1.45)
			if (a != None)
				if (a.IsA('DeflectorGrenade'))
					LockPawn = None;
	
					
		if (LockPawn != None) bTracking = True;
		else if(bLoseLock) bTracking = False;
					
}


static final function float ACos  ( float A )	// thanks to UnrealWiki for this
{
  if (A>1||A<-1) //outside domain!
    return 0;
  if (A==0) //div by 0 check
    return (Pi/2.0);
  A=ATan(Sqrt(1.0-Square(A))/A);
  if (A<0)

    A+=Pi;
  Return A;
}

//---END-CLASS---

defaultproperties
{
     SearchRadius=500
     AquireFOV=0.872665
     MaintainFOV=1.745329
     mpBlastRadius=320.000000
     ItemName="Heat-Seeking Missile"
     speed=1800.000000
     MaxSpeed=2500.000000
     Damage=500.000000
     bAlwaysRelevant=True
}
